macro(set_cxx_standard version)
  if (CMAKE_VERSION VERSION_LESS "3.1")
	if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++${version}")
	endif ()
  else ()
	set (CMAKE_CXX_STANDARD ${version})
  endif ()
endmacro(set_cxx_standard)

function(llvm_config)
  set(oneValueArgs GET_INCDIR GET_LIBDIR)
  cmake_parse_arguments(LLVM "" "${oneValueArgs}" "" ${ARGV})
  if(NOT DEFINED LLVMConfig)
	set(LLVMConfig llvm-config)
  endif()

  if(DEFINED LLVM_GET_INCDIR)
	execute_process(COMMAND ${LLVMConfig} --includedir OUTPUT_VARIABLE ${LLVM_GET_INCDIR})
	string(STRIP ${${LLVM_GET_INCDIR}} ${LLVM_GET_INCDIR})
	set(${LLVM_GET_INCDIR} ${${LLVM_GET_INCDIR}} PARENT_SCOPE)
  endif()

  if(DEFINED LLVM_GET_LIBDIR)
	execute_process(COMMAND ${LLVMConfig} --libdir OUTPUT_VARIABLE ${LLVM_GET_LIBDIR})
	string(STRIP ${${LLVM_GET_LIBDIR}} ${LLVM_GET_LIBDIR})
	set(${LLVM_GET_LIBDIR} ${${LLVM_GET_LIBDIR}} PARENT_SCOPE)
  endif()
endfunction()

function(add_clang_target name)
  set(multiValueArgs FILES DEPENDS)
  cmake_parse_arguments(RBIN "" "" "${multiValueArgs}" ${ARGV})
  file(GLOB RBIN_SRCS ${RBIN_FILES})
  add_executable(${name} ${RBIN_SRCS})
  if(DEFINED RBIN_DEPENDS)
	target_link_libraries(${name} ${RBIN_DEPENDS})
  endif()
  install(TARGETS ${name} DESTINATION bin)
endfunction()

